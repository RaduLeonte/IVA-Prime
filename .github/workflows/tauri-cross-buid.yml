name: Build Tauri App

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  pull_request:
    branches:
      - master
  release:
    types: [published]


jobs:
  check-new-commits:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_commits.outputs.should_build }}
    steps:
      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh jq

      - name: Get time of last successful scheduled run
        id: last_run
        run: |
          LAST_RUN=$(gh run list --repo "${{ github.repository }}" --workflow="Build Tauri App" --branch=master --event=schedule --json startedAt,status,conclusion --limit 10 \
            | jq -r '[.[] | select(.status=="completed" and .conclusion=="success")][0].startedAt')
          echo "last_run=$LAST_RUN" >> $GITHUB_OUTPUT
          echo "last_run=$LAST_RUN"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new commits since last nightly
        id: check_commits
        run: |
          if [ -z "${{ steps.last_run.outputs.last_run }}" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "No previous run -> build"
            exit 0
          fi
          COMMITS=$(gh api repos/${{ github.repository }}/commits \
            -F sha=master \
            -F since="${{ steps.last_run.outputs.last_run }}" \
            | jq 'length')
          echo "Number of new commits: $COMMITS"
          if [ "$COMMITS" -gt "0" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "New commits -> build"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "No new commits -> do not build"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  get-info:
    runs-on: ubuntu-latest
    needs: check-new-commits
    if: github.event_name != 'schedule' || needs.check-new-commits.outputs.should_build == 'true'
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get_version
        working-directory: tauri/iva-prime/src-tauri
        shell: bash
        run: |
          VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT


  build-windows:
    runs-on: windows-latest
    needs: [get-info, check-new-commits]
    if: github.event_name != 'schedule' || needs.check-new-commits.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        working-directory: tauri/iva-prime
        run: npm install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        with:
          projectPath: tauri/iva-prime
          args: '--bundles nsis'

      - name: Rename Windows artifact
        shell: bash
        run: |
          VERSION="${{ needs.get-info.outputs.version }}"
          mv tauri/iva-prime/src-tauri/target/release/bundle/nsis/*.exe IVA-Prime-${VERSION}-win64-setup.exe

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: iva-prime-windows
          path: IVA-Prime-${{ needs.get-info.outputs.version }}-win64-setup.exe


  build-macos-intel:
    runs-on: macos-latest
    needs: [get-info, check-new-commits]
    if: github.event_name != 'schedule' || needs.check-new-commits.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin


      - name: Install frontend dependencies
        working-directory: tauri/iva-prime
        run: npm install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        with:
          projectPath: tauri/iva-prime
          args: '--target x86_64-apple-darwin --bundles dmg'

      - name: Rename macOS Intel artifact
        shell: bash
        run: |
          VERSION="${{ needs.get-info.outputs.version }}"
          mv tauri/iva-prime/src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg IVA-Prime-${VERSION}-macos-intel.dmg

      - name: Upload macOS Intel artifact
        uses: actions/upload-artifact@v4
        with:
          name: iva-prime-macos-intel
          path: IVA-Prime-${{ needs.get-info.outputs.version }}-macos-intel.dmg


  build-macos-arm:
    runs-on: macos-latest
    needs: [get-info, check-new-commits]
    if: github.event_name != 'schedule' || needs.check-new-commits.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin


      - name: Install frontend dependencies
        working-directory: tauri/iva-prime
        run: npm install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        with:
          projectPath: tauri/iva-prime
          args: '--target aarch64-apple-darwin --bundles dmg'

      - name: Rename macOS ARM artifact
        shell: bash
        run: |
          VERSION="${{ needs.get-info.outputs.version }}"
          mv tauri/iva-prime/src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg IVA-Prime-${VERSION}-macos-arm.dmg

      - name: Upload macOS ARM artifact
        uses: actions/upload-artifact@v4
        with:
          name: iva-prime-macos-arm
          path: IVA-Prime-${{ needs.get-info.outputs.version }}-macos-arm.dmg


  build-linux:
    runs-on: ubuntu-22.04
    needs: [get-info, check-new-commits]
    if: github.event_name != 'schedule' || needs.check-new-commits.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        working-directory: tauri/iva-prime
        run: npm install


      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        with:
          projectPath: tauri/iva-prime
          args: '--bundles deb,rpm'

      - name: Rename Linux artifact
        shell: bash
        run: |
          VERSION="${{ needs.get-info.outputs.version }}"
          # Rename AppImage
          mv tauri/iva-prime/src-tauri/target/release/bundle/appimage/*.AppImage IVA-Prime-${VERSION}-linux.AppImage || true
          # Rename DEB
          mv tauri/iva-prime/src-tauri/target/release/bundle/deb/*.deb IVA-Prime-${VERSION}-linux.deb || true
          # Rename RPM
          mv tauri/iva-prime/src-tauri/target/release/bundle/rpm/*.rpm IVA-Prime-${VERSION}-linux.rpm || true

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iva-prime-linux
          path: |
            IVA-Prime-${{ needs.get-info.outputs.version }}-linux.AppImage
            IVA-Prime-${{ needs.get-info.outputs.version }}-linux.deb
            IVA-Prime-${{ needs.get-info.outputs.version }}-linux.rpm


  pre-release:
    runs-on: ubuntu-latest
    needs: [get-info, check-new-commits, build-windows, build-macos-intel, build-macos-arm, build-linux]
    if: >-
      (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule')
      && github.ref == 'refs/heads/master'
      && (github.event_name != 'schedule' || needs.check-new-commits.outputs.should_build == 'true')
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-windows
          path: ./

      - name: Download macOS Intel artifact
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-macos-intel
          path: ./

      - name: Download macOS ARM artifact
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-macos-arm
          path: ./

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-linux
          path: ./

      - name: Generate SHA256 checksums
        run: |
          sha256sum *.AppImage > SHA256SUMS.txt || true
          sha256sum *.deb >> SHA256SUMS.txt || true
          sha256sum *.rpm >> SHA256SUMS.txt || true
          sha256sum *.exe >> SHA256SUMS.txt || true
          sha256sum *.dmg >> SHA256SUMS.txt || true
          cat SHA256SUMS.txt

      - name: List files
        run: ls -rl


      - name: Update Nightly Release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: "IVA Prime v${{ needs.get-info.outputs.version }}-pre-release-${{ github.run_id }}"
          prerelease: true
          body: |
            Nightly build of the IVA Prime desktop app.
            This version might contain bugs and can be unstable compared to the full release!
          files: |
            ./SHA256SUMS.txt
            ./*.AppImage
            ./*.deb
            ./*.rpm
            ./*.exe
            ./*.dmg
