name: Build Tauri App

on:
  workflow_dispatch: # Manual trigger: on PR -> no pre-release or on master -> pre-release
  schedule: #Â Nightly build
    - cron: '0 0 * * *'
  pull_request: # PR
    branches:
      - master
  release: # Full release
    types: [published]


jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_build: ${{ steps.decide_should_build.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Get version from Cargo.toml and context
        id: get_version
        working-directory: tauri/iva-prime/src-tauri
        shell: bash
        run: |
          VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml)
          if [ "${{ github.event_name }}" = "release" ]; then
            FINAL_VERSION="$VERSION"
          else
            FINAL_VERSION="$VERSION-pre-release-${{ github.run_id }}"
          fi
          echo "version=$FINAL_VERSION" >> $GITHUB_OUTPUT
          echo "version=$FINAL_VERSION"

  
      - name: Decide whether to build
        id: decide_should_build
        run: |
          echo "GitHub event: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "schedule" ]; then
            sudo apt-get update && sudo apt-get install -y gh jq
            LAST_RUN=$(gh run list --repo "${{ github.repository }}" --workflow="Build Tauri App" --branch=master --event=schedule --json startedAt,status,conclusion --limit 10 | jq -r '[.[] | select(.status=="completed" and .conclusion=="success")][0].startedAt')
            echo "Last successful scheduled run: $LAST_RUN"
            if [ -z "$LAST_RUN" ] || [ "$LAST_RUN" == "null" ]; then
              echo "should_build=true" >> $GITHUB_OUTPUT
              echo "No previous run -> build"
              exit 0
            fi
            COMMITS=$(gh api repos/${{ github.repository }}/commits -F sha=master -F since="$LAST_RUN" | jq 'length')
            echo "Number of new commits: $COMMITS"
            if [ "$COMMITS" -gt "0" ]; then
              echo "should_build=true" >> $GITHUB_OUTPUT
              echo "New commits -> build"
            else
              echo "should_build=false" >> $GITHUB_OUTPUT
              echo "No new commits since last scheduled run -> skipping build"
              exit 0
            fi
          else
            echo "Non-scheduled run (PR, dispatch, release, etc) -> always build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build-windows:
    runs-on: windows-latest
    needs: [get-info]
    if: needs.get-info.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.5'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        working-directory: tauri/iva-prime
        run: npm install

      - name: Set npm version
        working-directory: tauri/iva-prime
        shell: bash
        run: npm version "${{ needs.get-info.outputs.version }}"

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY}}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD}}
        with:
          projectPath: tauri/iva-prime
          args: >-
            --bundles nsis -c '{"version": "${{ needs.get-info.outputs.version }}"}'

      - name: Rename Windows artifact
        shell: bash
        run: |
          VERSION="${{ needs.get-info.outputs.version }}"
          mv tauri/iva-prime/src-tauri/target/release/bundle/nsis/*.exe IVA-Prime-${VERSION}-win64-setup.exe

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: iva-prime-windows
          path: IVA-Prime-${{ needs.get-info.outputs.version }}-win64-setup.exe


  build-macos-intel:
    runs-on: macos-latest
    needs: [get-info]
    if: needs.get-info.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.5'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      - name: Install frontend dependencies
        working-directory: tauri/iva-prime
        run: npm install

      - name: Set npm version
        working-directory: tauri/iva-prime
        shell: bash
        run: npm version "${{ needs.get-info.outputs.version }}"

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY}}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD}}
        with:
          projectPath: tauri/iva-prime
          args: >-
            --target x86_64-apple-darwin --bundles app,dmg -c '{"version": "${{ needs.get-info.outputs.version }}"}'

      - name: Rename macOS Intel artifact
        shell: bash
        run: |
          VERSION="${{ needs.get-info.outputs.version }}"
          # Rename app
          mv tauri/iva-prime/src-tauri/target/aarch64-apple-darwin/release/bundle/app/*.app IVA-Prime-${VERSION}-macos-arm.app
          # Rename dmg
          mv tauri/iva-prime/src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg IVA-Prime-${VERSION}-macos-arm.dmg

      - name: Upload macOS Intel artifact
        uses: actions/upload-artifact@v4
        with:
          name: iva-prime-macos-intel
          path: IVA-Prime-${{ needs.get-info.outputs.version }}-macos-intel.dmg


  build-macos-arm:
    runs-on: macos-latest
    needs: [get-info]
    if: needs.get-info.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.5'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Install frontend dependencies
        working-directory: tauri/iva-prime
        run: npm install

      - name: Set npm version
        working-directory: tauri/iva-prime
        shell: bash
        run: npm version "${{ needs.get-info.outputs.version }}"

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY}}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD}}
        with:
          projectPath: tauri/iva-prime
          args: >-
            --target aarch64-apple-darwin --bundles app,dmg -c '{"version": "${{ needs.get-info.outputs.version }}"}'

      - name: Rename macOS ARM artifact
        shell: bash
        run: |
          VERSION="${{ needs.get-info.outputs.version }}"
          # Rename app
          mv tauri/iva-prime/src-tauri/target/aarch64-apple-darwin/release/bundle/app/*.app IVA-Prime-${VERSION}-macos-arm.app
          # Rename dmg
          mv tauri/iva-prime/src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg IVA-Prime-${VERSION}-macos-arm.dmg

      - name: Upload macOS ARM artifact
        uses: actions/upload-artifact@v4
        with:
          name: iva-prime-macos-arm
          path: |
            IVA-Prime-${{ needs.get-info.outputs.version }}-macos-arm.app
            IVA-Prime-${{ needs.get-info.outputs.version }}-macos-arm.dmg


  build-linux:
    runs-on: ubuntu-22.04
    needs: [get-info]
    if: needs.get-info.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.5'
        
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        working-directory: tauri/iva-prime
        run: npm install

      - name: Set npm version
        working-directory: tauri/iva-prime
        shell: bash
        run: npm version "${{ needs.get-info.outputs.version }}"

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY}}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD}}
        with:
          projectPath: tauri/iva-prime
          args: >-
            --bundles appimage,deb,rpm -c '{"version": "${{ needs.get-info.outputs.version }}"}'

      - name: Rename Linux artifact
        shell: bash
        run: |
          VERSION="${{ needs.get-info.outputs.version }}"
          # Rename AppImage
          mv tauri/iva-prime/src-tauri/target/release/bundle/appimage/*.AppImage IVA-Prime-${VERSION}-linux.AppImage || true
          # Rename DEB
          mv tauri/iva-prime/src-tauri/target/release/bundle/deb/*.deb IVA-Prime-${VERSION}-linux.deb || true
          # Rename RPM
          mv tauri/iva-prime/src-tauri/target/release/bundle/rpm/*.rpm IVA-Prime-${VERSION}-linux.rpm || true

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iva-prime-linux
          path: |
            IVA-Prime-${{ needs.get-info.outputs.version }}-linux.AppImage
            IVA-Prime-${{ needs.get-info.outputs.version }}-linux.deb
            IVA-Prime-${{ needs.get-info.outputs.version }}-linux.rpm


  pre-release:
    runs-on: ubuntu-latest
    needs: [get-info, build-windows, build-macos-intel, build-macos-arm, build-linux]
    if: (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master') || (github.event_name == 'schedule' && needs.get-info.outputs.should_build == 'true')
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-windows
          path: ./

      - name: Download macOS Intel artifacts
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-macos-intel
          path: ./

      - name: Download macOS ARM artifacts
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-macos-arm
          path: ./

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-linux
          path: ./

      - name: List files
        run: ls -rl


      - name: Update Nightly Release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: "IVA Prime v${{ needs.get-info.outputs.version }}"
          prerelease: true
          body: |
            Nightly build of the IVA Prime desktop app.
            This version might contain bugs and can be unstable compared to the full release!
          files: |
            ./*.AppImage
            ./*.deb
            ./*.rpm
            ./*.exe
            ./*.app
            ./*.dmg

  release:
    runs-on: ubuntu-latest
    needs: [get-info, build-windows, build-macos-intel, build-macos-arm, build-linux]
    if: github.event_name == 'release'
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-windows
          path: ./

      - name: Download macOS Intel artifacts
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-macos-intel
          path: ./

      - name: Download macOS ARM artifacts
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-macos-arm
          path: ./

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: iva-prime-linux
          path: ./


      - name: List files
        run: ls -rl

      - name: Upload assets to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./*.AppImage
            ./*.deb
            ./*.rpm
            ./*.exe
            ./*.app
            ./*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
